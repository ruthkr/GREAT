[{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://ruthkr.github.io/greatR/articles/optimise-parameters.html","id":"without-boundary-initialisation","dir":"Articles","previous_headings":"","what":"Without boundary initialisation","title":"Registering data with parameter optimisation","text":"data used register data section used. optimisation process, users just need enable parameter optimise_registration_parameters = TRUE using main function scale_and_register_data() shown figure .  example, use one gene BRAA03G023790.3C, can filter data follows: running registration, can visualise results follows:","code":"gene_BRAA03G023790.3C_data <- all_data_df %>%    dplyr::filter(locus_name == \"BRAA03G023790.3C\")  gene_BRAA03G023790.3C_data %>%    head(5) %>%    knitr::kable() # Running the registration registration_results_without_boundary <- scale_and_register_data(   input_df = gene_BRAA03G023790.3C_data,   min_num_overlapping_points = 4,   initial_rescale = FALSE,   do_rescale = TRUE,   accession_data_to_transform = \"Col0\",   accession_data_ref = \"Ro18\",   start_timepoint = \"reference\",    maintain_min_num_overlapping_points = FALSE,    optimise_registration_parameters = TRUE )  # ── Starting optimisation ──────────────────────────────────────────────────────────────────────────── # ℹ Using computed stretch boundary                     # ℹ Using computed shift boundary                       # ✓ Optimising registration parameters for genes (1/1) [11m 30s] # ✓ Finished optimisation #  # ── Model comparison results ───────────────────────────────────────────────────────────────────────── # ℹ BIC finds registration better than non-registration for: 1/1 #  # ── Applying the best-shifts and stretches to gene expression ──────────────────────────────────────── # ✓ Normalising expression by mean and sd of compared values (1/1) [20ms] # ✓ Applying best shift (1/1) [26ms] # ℹ Max value of expression_value: 1.36 # ✓ Imputing transformed expression values (1/1) [29ms] registration_results_without_boundary$imputed_mean_df %>%    greatR::plot_registration_results() +   ggplot2::labs(title = \"Registration results without boundary initialisation\")"},{"path":"https://ruthkr.github.io/greatR/articles/optimise-parameters.html","id":"with-boundary-initialisation","dir":"Articles","previous_headings":"","what":"With boundary initialisation","title":"Registering data with parameter optimisation","text":"Users can also specify initialise boundary optimisation performed routine process done , stretch shift initialisation (see figure ).  running registration, can visualise results follows:","code":"# Running the registration registration_results_with_boundary <- scale_and_register_data(   input_df = gene_BRAA03G023790.3C_data,   stretches = c(1.5, 2),    shifts = seq(1.5, 3, by = 0.5),   min_num_overlapping_points = 4,   initial_rescale = FALSE,   do_rescale = TRUE,   accession_data_to_transform = \"Col0\",   accession_data_ref = \"Ro18\",   start_timepoint = \"reference\",    maintain_min_num_overlapping_points = FALSE,   optimise_registration_parameters = TRUE )  # ── Starting optimisation ──────────────────────────────────────────────────────────────────────────── # ℹ Using user-defined stretches as stretch boundary # ℹ Using user-defined shifts as shift boundary # ✓ Optimising registration parameters for genes (1/1) [8m 3.9s] # ✓ Finished optimisation #  # ── Model comparison results ───────────────────────────────────────────────────────────────────────── # ℹ BIC finds registration better than non-registration for: 1/1 #  # ── Applying the best-shifts and stretches to gene expression ──────────────────────────────────────── # ✓ Normalising expression by mean and sd of compared values (1/1) [13ms] # ✓ Applying best shift (1/1) [23ms] # ℹ Max value of expression_value: 1.36 # ✓ Imputing transformed expression values (1/1) [20ms] registration_results$imputed_mean_df %>%    greatR::plot_registration_results() +   ggplot2::labs(title = \"Registration results with boundary initialisation\")"},{"path":"https://ruthkr.github.io/greatR/articles/prepare-data.html","id":"data-requirements","dir":"Articles","previous_headings":"","what":"Data requirements","title":"Preparing data","text":"Input data frame required greatR register gene expression profiles data frame contains gene expression time-course data replicates. illustrated diagram shows required input_df data frame format greatR. data frame must contain: two different species users wish compare (gene, least two replicates required species), six data columns: locus_name: accession unique ID gene. accession: accession name species compare. timepoint: time point gene expression data. expression_value: desired RNA-seq expression value measure abundance gene transcripts one wishes compare. value can RPM, RPKM, FPKM, TPM, TMM, DESeq, SCnorm, GeTMM, ComBat-Seq raw reads counts. tissue: tissue RNA-seq data extracted. group: replicate ID expression value.","code":""},{"path":"https://ruthkr.github.io/greatR/articles/prepare-data.html","id":"using-a-helper-function-to-prepare-input-data","dir":"Articles","previous_headings":"","what":"Using a helper function to prepare input data","title":"Preparing data","text":"greatR package provides helper function get_expression_of_interest() combine reference query (data register) data frames, table ID connect reference query data frames provided (illustrated figure ).   package also provides data frames examples use function. data frames expression data B. rapa (Calderwood et al., 2021), Arabidopsis (Klepikova et al., 2015), join table table ID contains accession B. rapa Arabidopsis. table ID important combine B. rapa Arabidopsis data frames.","code":""},{"path":"https://ruthkr.github.io/greatR/articles/prepare-data.html","id":"load-and-view-example-data","dir":"Articles","previous_headings":"Using a helper function to prepare input data","what":"Load and view example data","title":"Preparing data","text":"load example data frames provided within package, users need run following procedure: Let’s take look data frame loaded : can see, data frames expression profiles contain column gene accession (CDS.model). two columns data frame mapped table ID can see : CDS.model B. rapa gene accessions locus_name Arabidopsis gene accessions. informations, can easily get required input data.","code":"# Load the package library(greatR) library(dplyr) # Load example data id_table_rapa_subset <- system.file(   \"extdata/sample_data/id_table_5genes.rds\",    package = \"greatR\") %>%    readRDS() klepikova_subset <- system.file(   \"extdata/sample_data/arabidopsis_expression_5genes.rds\",    package = \"greatR\") %>%    readRDS() rapa_subset <- system.file(   \"extdata/sample_data/brassica_rapa_expression_5genes.rds\",    package = \"greatR\") %>%    readRDS() # View reference data rapa_subset %>%   utils::head(3) %>%   knitr::kable() # View query data klepikova_subset %>%   utils::head(3) %>%   knitr::kable() # View table ID id_table_rapa_subset %>%   dplyr::select(CDS.model, locus_name, symbol, gene_id) %>%    utils::head(3) %>%   knitr::kable()"},{"path":"https://ruthkr.github.io/greatR/articles/prepare-data.html","id":"combine-data","dir":"Articles","previous_headings":"Using a helper function to prepare input data","what":"Combine data","title":"Preparing data","text":"Users can use function get_expression_of_interest() combine two different table data frames containing expression values users wish compare. Let’s take look combined data: combining reference data data transform, users need adjust required input data, can done follows.","code":"all_data <- get_expression_of_interest(   data_ref = rapa_subset,   data_to_transform = klepikova_subset,   id_table = id_table_rapa_subset,   lookup_col_ref_and_id_table = \"CDS.model\",   lookup_col_ref_and_to_transform = \"locus_name\",   colnames_wanted = NULL,   tissue_wanted = \"apex\",   gene_of_interest_acc = c(\"AT1G69120\", \"AT5G618\"),   sum_exp_data_ref = FALSE,   accession_data_to_transform = \"Col0\" ) # View data all_data %>%   dplyr::group_by(accession) %>%   dplyr::slice(1:3) %>%   knitr::kable() all_data_final <- all_data %>%    dplyr::select(     locus_name,      accession,      timepoint,      expression_value = norm.cpm,      tissue,      group   )  all_data_final %>%   dplyr::group_by(accession) %>%   dplyr::slice(1:6) %>%   knitr::kable()"},{"path":"https://ruthkr.github.io/greatR/articles/register-data.html","id":"load-sample-data","dir":"Articles","previous_headings":"","what":"Load sample data","title":"Registering data","text":"greatR package provides example data frame containing two different species Arabidopsis B. rapa two three different replicates, respectively. data frame can read follow: Note data six columns required package documented preparing data article.","code":"# Load the package library(greatR) library(dplyr) # Gene expression data with replicates all_data_df <- system.file(\"extdata/brapa_arabidopsis_all_replicates.csv\", package = \"greatR\") %>%   utils::read.csv() all_data_df %>%   dplyr::group_by(accession) %>%   dplyr::slice(1:6) %>%   knitr::kable()"},{"path":"https://ruthkr.github.io/greatR/articles/register-data.html","id":"register-the-data","dir":"Articles","previous_headings":"","what":"Register the data","title":"Registering data","text":"align gene expression time-course Arabidopsis Col-0 B. rapa Ro18, can use function scale_and_register_data(). Stretch factors one parameters function scale_and_register_data() can estimated using function: can see , approximation stretch factor around 2.7. Therefore, users can use values around estimation value. Function scale_and_register_data() returns list seven data frames: mean_df data frame containing mean expression value gene accession every time point. mean_df_sc identical mean_df, additional column sc.expression_value scaled mean expression values. to_shift_df processed input data frame ready registered. best_shifts data frame containing best shift factor given stretch. shifted_mean_df registration result – stretching shifting. imputed_mean_df imputed registration result. all_shifts_df table containing candidates registration parameters score applying parameter (stretch shift factor). model_comparison_df table comparing optimal registration function gene (based all_shifts_df scores) model registration applied. data frame outputs can summarised visualised; see documentation visualising results article.","code":"get_approximate_stretch(   input_df = all_data_df,   accession_data_to_transform = \"Col0\",   accession_data_ref = \"Ro18\" ) #> [1] 2.666667 # Running the registration registration_results <- scale_and_register_data(   input_df = all_data_df,   stretches = c(3, 2.5, 2, 1.5, 1),   shifts = seq(-4, 4, length.out = 33),   min_num_overlapping_points = 4,   initial_rescale = FALSE,   do_rescale = TRUE,   accession_data_to_transform = \"Col0\",   accession_data_ref = \"Ro18\",   start_timepoint = \"reference\" ) #>  #> ── Information before registration ───────────────────────────────────────────── #> ℹ Max value of expression_value of all_data_df: 262.28 #>  #> ── Analysing models for all stretch and shift factor ─────────────────────────── #>  #> ── Analysing models for stretch factor = 3 ── #> ✓ Calculating score for all shifts (10/10) [2.6s] #> ✓ Normalising expression by mean and sd of compared values (10/10) [85ms] #> ✓ Applying best shift (10/10) [91ms] #> ✓ Calculating registration vs non-registration comparison BIC (10/10) [140ms] #> ✓ Finished analysing models for stretch factor = 3 #>  #> ── Analysing models for stretch factor = 2.5 ── #> ✓ Calculating score for all shifts (10/10) [2.8s] #> ✓ Normalising expression by mean and sd of compared values (10/10) [81ms] #> ✓ Applying best shift (10/10) [103ms] #> ✓ Calculating registration vs non-registration comparison BIC (10/10) [160ms] #> ✓ Finished analysing models for stretch factor = 2.5 #>  #> ── Analysing models for stretch factor = 2 ── #> ✓ Calculating score for all shifts (10/10) [2.9s] #> ✓ Normalising expression by mean and sd of compared values (10/10) [95ms] #> ✓ Applying best shift (10/10) [82ms] #> ✓ Calculating registration vs non-registration comparison BIC (10/10) [164ms] #> ✓ Finished analysing models for stretch factor = 2 #>  #> ── Analysing models for stretch factor = 1.5 ── #> ✓ Calculating score for all shifts (10/10) [3s] #> ✓ Normalising expression by mean and sd of compared values (10/10) [107ms] #> ✓ Applying best shift (10/10) [84ms] #> ✓ Calculating registration vs non-registration comparison BIC (10/10) [171ms] #> ✓ Finished analysing models for stretch factor = 1.5 #>  #> ── Analysing models for stretch factor = 1 ── #> ✓ Calculating score for all shifts (10/10) [2.7s] #> ✓ Normalising expression by mean and sd of compared values (10/10) [85ms] #> ✓ Applying best shift (10/10) [90ms] #> ✓ Calculating registration vs non-registration comparison BIC (10/10) [154ms] #> ✓ Finished analysing models for stretch factor = 1 #>  #> ── Model comparison results ──────────────────────────────────────────────────── #> ℹ BIC finds registration better than non-registration for: 10/10 #>  #> ── Applying the best-shifts and stretches to gene expression ─────────────────── #> ✓ Normalising expression by mean and sd of compared values (10/10) [85ms] #> ✓ Applying best shift (10/10) [98ms] #> ℹ Max value of expression_value: 9.05 #> ✓ Imputing transformed expression values (10/10) [209ms] #>"},{"path":"https://ruthkr.github.io/greatR/articles/visualise-results.html","id":"get-summary-from-registration-results","dir":"Articles","previous_headings":"","what":"Get summary from registration results","title":"Visualising results","text":"total number registered non-registered genes can obtained running function summary_model_comparison() registration_results$model_comparison_df input. Function summary_model_comparison() returns list contains three different objects: df_summary contains result summaries registration results, registered_genes list gene accessions successfully registered, non_registered_genes list non-registered gene accessions. list gene accessions registered can viewed calling:","code":"# Get all of summary all_summary <- summary_model_comparison(registration_results$model_comparison_df)  all_summary$df_summary %>%   knitr::kable() all_summary$registered_genes #>  [1] \"BRAA09G045310.3C\" \"BRAA03G051930.3C\" \"BRAA04G005470.3C\" \"BRAA02G043220.3C\" #>  [5] \"BRAA06G025360.3C\" \"BRAA02G018970.3C\" \"BRAA07G030470.3C\" \"BRAA07G034100.3C\" #>  [9] \"BRAA03G023790.3C\" \"BRAA05G005370.3C\""},{"path":"https://ruthkr.github.io/greatR/articles/visualise-results.html","id":"plot-registration-results","dir":"Articles","previous_headings":"","what":"Plot registration results","title":"Visualising results","text":"Function plot_registration_results() allows users plot registration results genes interest. Users also option include information label plot whether particular genes registered , well registration parameters include model comparison data frame shown .  Notice include time points samples, users can set sync_timepoints = TRUE.","code":"# Plot registration result plot_registration_results(   registration_results$imputed_mean_df,   ncol = 3 ) # Plot registration result plot_registration_results(   registration_results$imputed_mean_df,   registration_results$model_comparison_df,   ncol = 3,   sync_timepoints = TRUE )"},{"path":[]},{"path":"https://ruthkr.github.io/greatR/articles/visualise-results.html","id":"calculate-sample-distance","dir":"Articles","previous_headings":"Analyse similarity of expression profiles overtime before and after registering","what":"Calculate sample distance","title":"Visualising results","text":"registering sample data, users can compare overall similarity registering using function calculate_between_sample_distance(). Function calculate_between_sample_distance() returns list seven data frames: distance_mean_df distance mean expression values. distance_scaled_mean_df distance scaled mean expression (genes). distance_scaled_mean_df_only_nonreg distance scaled mean expression (-registered genes). distance_scaled_mean_df_only_reg distance scaled mean expression (registered genes). distance_registered_df distance registered & scaled mean expression (genes). distance_registered_df_only_reg distance registered & scaled mean expression (registered genes).","code":"sample_distance <- calculate_between_sample_distance(   registration_results,   accession_data_ref = \"Ro18\" )"},{"path":"https://ruthkr.github.io/greatR/articles/visualise-results.html","id":"plot-heatmap-of-sample-distances","dir":"Articles","previous_headings":"Analyse similarity of expression profiles overtime before and after registering","what":"Plot heatmap of sample distances","title":"Visualising results","text":"data frames can visualised using function plot_heatmap().","code":"# Plot heatmap of mean expression profiles distance before scaling plot_heatmap(sample_distance$distance_mean_df) # Plot heatmap of mean expression profiles distance after scaling plot_heatmap(sample_distance$distance_scaled_mean_df) # Plot heatmap of mean expression profiles distance after registration process plot_heatmap(   sample_distance$distance_registered_df_only_reg,    same_max_timepoint = TRUE,    same_min_timepoint = TRUE )"},{"path":"https://ruthkr.github.io/greatR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ruth Kristianingsih. Author, maintainer. Alex Calderwood. Author.","code":""},{"path":"https://ruthkr.github.io/greatR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kristianingsih R, Calderwood (2022). greatR: Gene Registration Expression Time-Courses R. https://ruthkr.github.io/greatR/, https://github.com/ruthkr/greatR/.","code":"@Manual{,   title = {greatR: Gene Registration from Expression and Time-Courses in R},   author = {Ruth Kristianingsih and Alex Calderwood},   year = {2022},   note = {https://ruthkr.github.io/greatR/, https://github.com/ruthkr/greatR/}, }"},{"path":"https://ruthkr.github.io/greatR/index.html","id":"greatr-","dir":"","previous_headings":"","what":"Gene Registration from Expression and Time-Courses in R","title":"Gene Registration from Expression and Time-Courses in R","text":"goal greatR (Gene Registration Expression Time-courses R) register (align) gene expression profiles two species (reference data data transform). Non-reference gene expression profiles stretched shifted. optimality registration parameters (shifts stretches) estimated using least-squares criterion. package also designed compare registration model versus non-registration model, well determine whether registration model performed better non-registration transformation.","code":""},{"path":"https://ruthkr.github.io/greatR/index.html","id":"package-workflow","dir":"","previous_headings":"","what":"Package workflow","title":"Gene Registration from Expression and Time-Courses in R","text":"Flowchart illustrates workflow package given input data:  details use package available function documentations vignettes: Input requirements Register data Visualise registration results Register data parameter optimisation","code":""},{"path":"https://ruthkr.github.io/greatR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Gene Registration from Expression and Time-Courses in R","text":"can install released version greatR CRAN : development version greatR GitHub :","code":"install.packages(\"greatR\") # install.packages(\"devtools\") devtools::install_github(\"ruthkr/greatR\")"},{"path":"https://ruthkr.github.io/greatR/index.html","id":"usage---quick-start","dir":"","previous_headings":"","what":"Usage - quick start","title":"Gene Registration from Expression and Time-Courses in R","text":"basic example shows register (align) gene expression profiles time:","code":"# Load the package library(greatR) # Load a data frame from the sample data all_data_df <- system.file(\"extdata/brapa_arabidopsis_all_replicates.csv\", package = \"greatR\") %>%   utils::read.csv()  # Running the registration registration_results <- scale_and_register_data(   input_df = all_data_df,   stretches = c(3, 2.5, 2, 1.5, 1),   shifts = seq(-4, 4, length.out = 33),   min_num_overlapping_points = 4,   initial_rescale = FALSE,   do_rescale = TRUE,   accession_data_to_transform = \"Col0\",   accession_data_ref = \"Ro18\",   start_timepoint = \"reference\" ) #>  #> ── Information before registration ───────────────────────────────────────────── #> ℹ Max value of expression_value of all_data_df: 262.28 #>  #> ── Analysing models for all stretch and shift factor ─────────────────────────── #>  #> ── Analysing models for stretch factor = 3 ── #> ✓ Calculating score for all shifts (10/10) [2.6s] #> ✓ Normalising expression by mean and sd of compared values (10/10) [85ms] #> ✓ Applying best shift (10/10) [91ms] #> ✓ Calculating registration vs non-registration comparison BIC (10/10) [140ms] #> ✓ Finished analysing models for stretch factor = 3 #>  #> ── Analysing models for stretch factor = 2.5 ── #> ✓ Calculating score for all shifts (10/10) [2.8s] #> ✓ Normalising expression by mean and sd of compared values (10/10) [81ms] #> ✓ Applying best shift (10/10) [103ms] #> ✓ Calculating registration vs non-registration comparison BIC (10/10) [160ms] #> ✓ Finished analysing models for stretch factor = 2.5 #>  #> ── Analysing models for stretch factor = 2 ── #> ✓ Calculating score for all shifts (10/10) [2.9s] #> ✓ Normalising expression by mean and sd of compared values (10/10) [95ms] #> ✓ Applying best shift (10/10) [82ms] #> ✓ Calculating registration vs non-registration comparison BIC (10/10) [164ms] #> ✓ Finished analysing models for stretch factor = 2 #>  #> ── Analysing models for stretch factor = 1.5 ── #> ✓ Calculating score for all shifts (10/10) [3s] #> ✓ Normalising expression by mean and sd of compared values (10/10) [107ms] #> ✓ Applying best shift (10/10) [84ms] #> ✓ Calculating registration vs non-registration comparison BIC (10/10) [171ms] #> ✓ Finished analysing models for stretch factor = 1.5 #>  #> ── Analysing models for stretch factor = 1 ── #> ✓ Calculating score for all shifts (10/10) [2.7s] #> ✓ Normalising expression by mean and sd of compared values (10/10) [85ms] #> ✓ Applying best shift (10/10) [90ms] #> ✓ Calculating registration vs non-registration comparison BIC (10/10) [154ms] #> ✓ Finished analysing models for stretch factor = 1 #>  #> ── Model comparison results ──────────────────────────────────────────────────── #> ℹ BIC finds registration better than non-registration for: 10/10 #>  #> ── Applying the best-shifts and stretches to gene expression ─────────────────── #> ✓ Normalising expression by mean and sd of compared values (10/10) [85ms] #> ✓ Applying best shift (10/10) [98ms] #> ℹ Max value of expression_value: 9.05 #> ✓ Imputing transformed expression values (10/10) [209ms] #>"},{"path":"https://ruthkr.github.io/greatR/index.html","id":"reference","dir":"","previous_headings":"","what":"Reference","title":"Gene Registration from Expression and Time-Courses in R","text":"Calderwood, ., Hepworth, J., Woodhouse, … Morris, R. (2021). Comparative transcriptomics reveals desynchronisation gene expression floral transition Arabidopsis Brassica rapa cultivars. Quantitative Plant Biology, 2, E4. doi:10.1017/qpb.2021.6","code":""},{"path":"https://ruthkr.github.io/greatR/reference/calculate_between_sample_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate distance between sample data before and after registration — calculate_between_sample_distance","title":"Calculate distance between sample data before and after registration — calculate_between_sample_distance","text":"Calculate distance sample data registration","code":""},{"path":"https://ruthkr.github.io/greatR/reference/calculate_between_sample_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate distance between sample data before and after registration — calculate_between_sample_distance","text":"","code":"calculate_between_sample_distance(   registration_results,   gene_col = \"locus_name\",   compare_ref_vs_transform = TRUE,   accession_data_ref )"},{"path":"https://ruthkr.github.io/greatR/reference/calculate_between_sample_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate distance between sample data before and after registration — calculate_between_sample_distance","text":"registration_results Result registration process using scale_and_register_data. gene_col Column name gene accession, default locus_name. compare_ref_vs_transform TRUE, default, comparison reference data data transform considered. accession_data_ref Accession name reference data.","code":""},{"path":"https://ruthkr.github.io/greatR/reference/calculate_between_sample_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate distance between sample data before and after registration — calculate_between_sample_distance","text":"function returns list data frames includes: distance_mean_df distance mean expression values. distance_scaled_mean_df distance scaled mean expression (genes). distance_scaled_mean_df_only_nonreg distance scaled mean expression (non-registered genes). distance_scaled_mean_df_only_reg distance scaled mean expression (registered genes). distance_registered_df distance registered & scaled mean expression (genes). distance_registered_df_only_reg distance registered & scaled mean expression (registered genes).","code":""},{"path":"https://ruthkr.github.io/greatR/reference/get_approximate_stretch.html","id":null,"dir":"Reference","previous_headings":"","what":"Get approximate stretch factor — get_approximate_stretch","title":"Get approximate stretch factor — get_approximate_stretch","text":"get_approximate_stretch() function get stretch factor estimation given input data. function take time point ranges reference query data compare estimate stretch factor.","code":""},{"path":"https://ruthkr.github.io/greatR/reference/get_approximate_stretch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get approximate stretch factor — get_approximate_stretch","text":"","code":"get_approximate_stretch(   input_df,   accession_data_to_transform,   accession_data_ref )"},{"path":"https://ruthkr.github.io/greatR/reference/get_approximate_stretch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get approximate stretch factor — get_approximate_stretch","text":"input_df Input data frame containing replicates gene expression genotype time point. accession_data_to_transform Accession name data transformed. accession_data_ref Accession name reference data.","code":""},{"path":"https://ruthkr.github.io/greatR/reference/get_approximate_stretch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get approximate stretch factor — get_approximate_stretch","text":"function returns estimation stretch factor registering data.","code":""},{"path":"https://ruthkr.github.io/greatR/reference/get_expression_of_interest.html","id":null,"dir":"Reference","previous_headings":"","what":"Get expression of interest — get_expression_of_interest","title":"Get expression of interest — get_expression_of_interest","text":"Get expression interest","code":""},{"path":"https://ruthkr.github.io/greatR/reference/get_expression_of_interest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get expression of interest — get_expression_of_interest","text":"","code":"get_expression_of_interest(   data_ref,   data_to_transform,   id_table,   lookup_col_ref_and_id_table = \"CDS.model\",   lookup_col_ref_and_to_transform = \"locus_name\",   colnames_wanted = NULL,   tissue_wanted = NULL,   gene_of_interest_acc,   sum_exp_data_ref = FALSE,   accession_data_to_transform = \"Col0\" )"},{"path":"https://ruthkr.github.io/greatR/reference/get_expression_of_interest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get expression of interest — get_expression_of_interest","text":"data_ref Data frame reference data. data_to_transform Data frame data transform. id_table Data frame ID table connecting reference data data transform. lookup_col_ref_and_id_table Column names shared reference data ID table. lookup_col_ref_and_to_transform Column names shared reference data data transform. colnames_wanted List column names keep reference data data transform. tissue_wanted Name tissue data compared. gene_of_interest_acc Gene accession list data transform. sum_exp_data_ref TRUE sum gene data. Default FALSE. accession_data_to_transform Accession name data transformed.","code":""},{"path":"https://ruthkr.github.io/greatR/reference/get_expression_of_interest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get expression of interest — get_expression_of_interest","text":"data frame contains reference data data transform selected gene interest.","code":""},{"path":"https://ruthkr.github.io/greatR/reference/get_mean_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate mean expression values from all expression data with replicates — get_mean_data","title":"Calculate mean expression values from all expression data with replicates — get_mean_data","text":"Calculate mean expression values expression data replicates","code":""},{"path":"https://ruthkr.github.io/greatR/reference/get_mean_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate mean expression values from all expression data with replicates — get_mean_data","text":"","code":"get_mean_data(   exp,   expression_value_threshold = 5,   accession_data_to_transform,   is_data_normalised = FALSE )"},{"path":"https://ruthkr.github.io/greatR/reference/get_mean_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate mean expression values from all expression data with replicates — get_mean_data","text":"exp Input data frame containing replicates gene expression genotype time point. expression_value_threshold Expression value threshold. Remove expressions maximum less threshold. NULL keep data. accession_data_to_transform Accession name data transformed. is_data_normalised TRUE dataset normalised prior registration process.","code":""},{"path":"https://ruthkr.github.io/greatR/reference/get_mean_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate mean expression values from all expression data with replicates — get_mean_data","text":"data frame contains mean expression data.","code":""},{"path":"https://ruthkr.github.io/greatR/reference/optimise_registration_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimise registration parameters with Simulated Annealing — optimise_registration_params","title":"Optimise registration parameters with Simulated Annealing — optimise_registration_params","text":"Optimise registration parameters Simulated Annealing","code":""},{"path":"https://ruthkr.github.io/greatR/reference/optimise_registration_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimise registration parameters with Simulated Annealing — optimise_registration_params","text":"","code":"optimise_registration_params(   input_df,   genes = NULL,   stretches_bound = NA,   shifts_bound = NA,   initial_rescale = FALSE,   do_rescale = TRUE,   min_num_overlapping_points = 4,   maintain_min_num_overlapping_points = FALSE,   accession_data_to_transform,   accession_data_ref,   start_timepoint = c(\"reference\", \"transform\", \"zero\"),   expression_value_threshold = 5,   is_data_normalised = FALSE,   num_iterations = 60 )"},{"path":"https://ruthkr.github.io/greatR/reference/optimise_registration_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimise registration parameters with Simulated Annealing — optimise_registration_params","text":"input_df Input data frame containing replicates gene expression genotype time point. genes List genes optimise. stretches_bound Optional candidate registration stretch factors define search space, otherwise automatic. shifts_bound Optional candidate registration shift values define search space, otherwise automatic. initial_rescale Scaling gene expression prior registration TRUE. do_rescale Scaling gene expression using overlapping time points points registration. min_num_overlapping_points Number minimum overlapping time points. Shifts considered leaves least many overlapping points applying registration function. maintain_min_num_overlapping_points Whether automatically calculate extreme (minimum maximum) values shifts maintain specified min_num_overlapping_points condition. default, FALSE. accession_data_to_transform Accession name data transformed. accession_data_ref Accession name reference data. start_timepoint Time points added reference data data transform shifting stretching. Can either \"reference\" (default), \"transform\", \"zero\". expression_value_threshold Expression value threshold. Remove expressions maximum less threshold. NULL keep data. is_data_normalised TRUE dataset normalised prior registration process. num_iterations Maximum number iterations algorithm. Default 100.","code":""},{"path":"https://ruthkr.github.io/greatR/reference/optimise_registration_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimise registration parameters with Simulated Annealing — optimise_registration_params","text":"List optimum registration parameters, optimum_params_df, candidate registration parameters, candidate_params_df genes.","code":""},{"path":"https://ruthkr.github.io/greatR/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://ruthkr.github.io/greatR/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://ruthkr.github.io/greatR/reference/plot_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualise distances between samples from different time points — plot_heatmap","title":"Visualise distances between samples from different time points — plot_heatmap","text":"Function plot_heatmap() allows users plot distances samples different time points investigate similarity progression gene expression states species registration.","code":""},{"path":"https://ruthkr.github.io/greatR/reference/plot_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualise distances between samples from different time points — plot_heatmap","text":"","code":"plot_heatmap(   sample_dist_df,   title = NULL,   axis_fontsize = NULL,   same_min_timepoint = FALSE,   same_max_timepoint = FALSE )"},{"path":"https://ruthkr.github.io/greatR/reference/plot_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualise distances between samples from different time points — plot_heatmap","text":"sample_dist_df Input data frame containing sample distance two different species. title Optional plot title. axis_fontsize Font size X Y axes labels. same_min_timepoint FALSE, default, take data minimum time point. same_max_timepoint FALSE, default, take data maximum time point.","code":""},{"path":"https://ruthkr.github.io/greatR/reference/plot_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualise distances between samples from different time points — plot_heatmap","text":"Distance heatmap gene expression profiles time two different species.","code":""},{"path":"https://ruthkr.github.io/greatR/reference/plot_registration_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot gene of interest after registration — plot_registration_results","title":"Plot gene of interest after registration — plot_registration_results","text":"Plot gene interest registration","code":""},{"path":"https://ruthkr.github.io/greatR/reference/plot_registration_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot gene of interest after registration — plot_registration_results","text":"","code":"plot_registration_results(   reg_result_df,   model_comparison_df = NULL,   gene_accession = \"first_genes\",   title = NULL,   ncol = NULL,   sync_timepoints = FALSE )"},{"path":"https://ruthkr.github.io/greatR/reference/plot_registration_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot gene of interest after registration — plot_registration_results","text":"reg_result_df Data frame registration results, output registration process. model_comparison_df Data frame model comparison, also output registration process. gene_accession List gene accessions, default first_genes take first 25 genes. title Optional plot title. ncol Number columns plot grid. default calculated automatically. sync_timepoints Whether synchronise maximum time points accession, default FALSE.","code":""},{"path":"https://ruthkr.github.io/greatR/reference/plot_registration_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot gene of interest after registration — plot_registration_results","text":"Plot gene interest registration process.","code":""},{"path":"https://ruthkr.github.io/greatR/reference/scale_and_register_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Register or synchronize different expression profiles — scale_and_register_data","title":"Register or synchronize different expression profiles — scale_and_register_data","text":"scale_and_register_data() function register expression profiles user wish compare. includes option scale data registration, find calculate score optimal shifts stretches, well apply best shifts stretches.","code":""},{"path":"https://ruthkr.github.io/greatR/reference/scale_and_register_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register or synchronize different expression profiles — scale_and_register_data","text":"","code":"scale_and_register_data(   input_df,   stretches = NA,   shifts = NA,   min_num_overlapping_points,   maintain_min_num_overlapping_points = FALSE,   initial_rescale = FALSE,   do_rescale = TRUE,   accession_data_to_transform,   accession_data_ref,   start_timepoint = c(\"reference\", \"transform\", \"zero\"),   expression_value_threshold = 5,   is_data_normalised = FALSE,   optimise_registration_parameters = FALSE,   num_iterations = 60 )"},{"path":"https://ruthkr.github.io/greatR/reference/scale_and_register_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register or synchronize different expression profiles — scale_and_register_data","text":"input_df Input data frame containing replicates gene expression genotype time point. stretches Candidate registration stretch factors apply data transform. shifts Candidate registration shift values apply data transform. min_num_overlapping_points Number minimum overlapping time points. Shifts considered leaves least many overlapping points applying registration function. maintain_min_num_overlapping_points Whether automatically calculate extreme (minimum maximum) values shifts maintain specified min_num_overlapping_points condition. default, FALSE. initial_rescale Scaling gene expression prior registration TRUE. do_rescale Scaling gene expression using overlapping time points points registration. accession_data_to_transform Accession name data transformed. accession_data_ref Accession name reference data. start_timepoint Time points added reference data data transform shifting stretching. Can either \"reference\" (default), \"transform\", \"zero\". expression_value_threshold Expression value threshold. Remove expressions maximum less threshold. NULL keep data. is_data_normalised TRUE dataset normalised prior registration process. optimise_registration_parameters Whether optimise registration parameters Simulated Annealing. default, FALSE. num_iterations Maximum number iterations Simulated Annealing optimisation. default, 60.","code":""},{"path":"https://ruthkr.github.io/greatR/reference/scale_and_register_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register or synchronize different expression profiles — scale_and_register_data","text":"function returns list data frames, containing: mean_df data frame containing mean expression value gene accession every time point. mean_df_sc identical mean_df, additional column sc.expression_value scaled mean expression values. to_shift_df processed input data frame ready registered. best_shifts data frame containing best shift factor given stretch. shifted_mean_df registration result - stretching shifting. imputed_mean_df imputed (transformed set common time points) registration result. all_shifts_df table containing candidates registration parameters score applying parameter (stretch shift factor). model_comparison_df table comparing optimal registration function gene (based all_shifts_df scores) model registration applied.","code":""},{"path":"https://ruthkr.github.io/greatR/reference/scale_and_register_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register or synchronize different expression profiles — scale_and_register_data","text":"","code":"if (FALSE) { # Load a data frame from the sample data all_data_df <- system.file(\"extdata/brapa_arabidopsis_all_replicates.csv\", package = \"greatR\") %>%   utils::read.csv()  # Running the registration registration_results <- scale_and_register_data(   input_df = all_data_df,   stretches = c(3, 2.5, 2, 1.5, 1),   shifts = seq(-4, 4, length.out = 33),   min_num_overlapping_points = 4,   initial_rescale = FALSE,   do_rescale = TRUE,   accession_data_to_transform = \"Col0\",   accession_data_ref = \"Ro18\",   start_timepoint = \"reference\" ) }"},{"path":"https://ruthkr.github.io/greatR/reference/summary_model_comparison.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise registration results — summary_model_comparison","title":"Summarise registration results — summary_model_comparison","text":"Summarise registration results","code":""},{"path":"https://ruthkr.github.io/greatR/reference/summary_model_comparison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise registration results — summary_model_comparison","text":"","code":"summary_model_comparison(model_comparison)"},{"path":"https://ruthkr.github.io/greatR/reference/summary_model_comparison.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise registration results — summary_model_comparison","text":"model_comparison Input data frame, element model_comparison result list scale_and_register_data().","code":""},{"path":"https://ruthkr.github.io/greatR/reference/summary_model_comparison.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise registration results — summary_model_comparison","text":"List containing summary table, registered gene accessions, non-registered gene accessions.","code":""},{"path":"https://ruthkr.github.io/greatR/news/index.html","id":"greatr-020","dir":"Changelog","previous_headings":"","what":"greatR 0.2.0","title":"greatR 0.2.0","text":"CRAN release: 2022-06-08 Added Alex Calderwood package co-author. Added vignette optimisation process. Refactored num_shifts shift_extreme parameters simplified shifts parameter.","code":""},{"path":"https://ruthkr.github.io/greatR/news/index.html","id":"improvements-0-2-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"greatR 0.2.0","text":"Improved default parameter values exported functions. Added {optimization}, {purrr} package dependencies. Removed {cowplot}, {ggpubr}, {ggrepel}, {Rtsne}, {viridis} package dependencies. Cleaned {cli} messages. Removed legacy AIC references, longer used. Updated calculate_between_sample_distance() use registration_results primary parameter instead mean_df, mean_df_sc, imputed_mean_df. Added warning comparable time points found using users’ pre-defined parameters. Refactored optimise_shift_extreme maintain_min_num_overlapping_points, properly defined corrected boundary box number overlapping points whether needed maintained .","code":""},{"path":"https://ruthkr.github.io/greatR/news/index.html","id":"bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"greatR 0.2.0","text":"Check input accessions exist input data get_approximate_stretch(). Manually create time point sorting levels x_sample y_sample columns according plot_heatmap(). Properly handle - character accession names plot_heatmap() time points parsed correctly.","code":""},{"path":"https://ruthkr.github.io/greatR/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"greatR 0.2.0","text":"Added optional parameter optimisation process using Simulated Annealing optimise_registration_params().","code":""},{"path":"https://ruthkr.github.io/greatR/news/index.html","id":"new-functions-0-2-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"greatR 0.2.0","text":"preprocess_data() simplify scale_and_register_data() code reuse logic elsewhere. get_best_stretch_and_shift_simplified(). get_BIC_from_registering_data(). get_boundary_box(). optimise_registration_params_single_gene(). optimise_registration_params() wrapper optimise_registration_params_single_gene() multiple genes. get_best_stretch_and_shift_after_optimisation().","code":""},{"path":"https://ruthkr.github.io/greatR/news/index.html","id":"greatr-010","dir":"Changelog","previous_headings":"","what":"greatR 0.1.0","title":"greatR 0.1.0","text":"CRAN release: 2022-01-12 Initial release. Added NEWS.md file track changes package.","code":""}]
