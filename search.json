[{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://ruthkr.github.io/greatR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://ruthkr.github.io/greatR/articles/register-data-manually.html","id":"load-sample-data","dir":"Articles","previous_headings":"","what":"Load sample data","title":"Register data with provided parameters","text":"greatR package provides example data frame containing two different species . thaliana B. rapa two three different replicates, respectively. data frame can read follows:","code":"# Load the package library(greatR) library(data.table) # Load a data frame from the sample data b_rapa_data <- system.file(\"extdata/brapa_arabidopsis_all_replicates.csv\", package = \"greatR\") |>   data.table::fread()"},{"path":"https://ruthkr.github.io/greatR/articles/register-data-manually.html","id":"registering-single-gene","dir":"Articles","previous_headings":"","what":"Registering single gene","title":"Register data with provided parameters","text":", use single gene gene_id = \"BRAA03G023790.3C\" sample data. registering, can use helper function get_approximate_stretch() approximate stretch factor sample datasets shown figure .  can now use estimated stretch calculated registration process . Users need set optimise_registration_parameters = FALSE disable automated optimisation process. check whether gene registered , can get summary results accessing model_comparison table registration result. can see, using given stretch shift parameter , B. rapa gene BRAA03G023790.3C can registered.","code":"gene_BRAA03G023790.3C_data <- b_rapa_data[gene_id == \"BRAA03G023790.3C\"] get_approximate_stretch(   gene_BRAA03G023790.3C_data,   reference = \"Ro18\",   query = \"Col0\" ) #> [1] 2.666667 registration_results <- register(   gene_BRAA03G023790.3C_data,   reference = \"Ro18\",   query = \"Col0\",   stretches = 2.6,   shifts = 4,   optimise_registration_parameters = FALSE ) #> ── Validating input data ─────────────────────────────────────────────────────── #> ℹ Will process 1 gene. #> #> ── Starting manual registration ──────────────────────────────────────────────── #> ✔ Applying registration for genes (1/1) [29ms] registration_results$model_comparison |>   knitr::kable()"},{"path":"https://ruthkr.github.io/greatR/articles/register-data-manually.html","id":"registering-multiple-gene-with-different-pre-defined-registration-parameters","dir":"Articles","previous_headings":"","what":"Registering multiple gene with different pre-defined registration parameters","title":"Register data with provided parameters","text":"Users can also register multiple different genes using pre-defined parameters. Similar registration process , users need set optimise_registration_parameters = FALSE disable automated optimisation process. Similar previous registration process, users can analyse registration result following visualising results vignette.","code":"registration_results <- register(   b_rapa_data,   reference = \"Ro18\",   query = \"Col0\",   stretches = seq(1, 3, 0.1),   shifts = seq(0, 4, 0.1),   optimise_registration_parameters = FALSE ) #> ── Validating input data ─────────────────────────────────────────────────────── #> ℹ Will process 10 genes. #> #> ── Starting manual registration ──────────────────────────────────────────────── #> ✔ Applying registration for genes (10/10) [15.8s]"},{"path":"https://ruthkr.github.io/greatR/articles/register-data.html","id":"loading-sample-data","dir":"Articles","previous_headings":"","what":"Loading sample data","title":"Registering data","text":"greatR package provides example data frame containing two different species . thaliana B. rapa two three different replicates, respectively. data frame can read follows: Note data five columns required package:","code":"# Load the package library(greatR) library(data.table) # Load a data frame from the sample data b_rapa_data <- system.file(\"extdata/brapa_arabidopsis_all_replicates.csv\", package = \"greatR\") |>   data.table::fread() b_rapa_data[, .SD[1:6], by = accession] |>   knitr::kable()"},{"path":"https://ruthkr.github.io/greatR/articles/register-data.html","id":"registering-the-data","dir":"Articles","previous_headings":"","what":"Registering the data","title":"Registering data","text":"align gene expression time-course Arabidopsis Col-0 B. rapa Ro18, can use function register(). default, best registration parameters optimised via Nelder-Mead (optimisation_method = \"nm\"). using default optimise_registration_parameters = TRUE, stretch shift search space automatically estimated. details function paramaters, go register().","code":"registration_results <- register(   b_rapa_data,   reference = \"Ro18\",   query = \"Col0\" ) #> ── Validating input data ──────────────────────────────────────────────────────── #> ℹ Will process 10 genes. #> #> ── Starting registration with optimisation ────────────────────────────────────── #> ℹ Using Nelder-Mead method. #> ℹ Using computed stretches and shifts search space limits. #> ✔ Optimising registration parameters for genes (10/10) [2.3s]"},{"path":"https://ruthkr.github.io/greatR/articles/register-data.html","id":"registration-results","dir":"Articles","previous_headings":"","what":"Registration results","title":"Registering data","text":"function register() returns list two frames: data data frame containing scaled expression data additional timepoint_reg column result registered time points applying registration parameters query data. model_comparison data frame containing () optimal stretch shift gene_id (b) Bayesian Information Criterion (BIC) separate model (BIC_separate) combined model (BIC_combined) applying optimal registration parameters gene. value BIC_combined < BIC_separate, expression dynamics reference query data can registered (registered = TRUE). check whether gene registered , can get summary results accessing model_comparison table registration result. sample data , can see ten genes, registered = TRUE, meaning reference query data ten genes can aligned registered. data frame outputs can summarised visualised; see documentation visualising results article.","code":"registration_results$model_comparison |>   knitr::kable()"},{"path":"https://ruthkr.github.io/greatR/articles/visualise-results.html","id":"getting-a-summary-from-registration-results","dir":"Articles","previous_headings":"","what":"Getting a summary from registration results","title":"Visualising results","text":"total number registered non-registered genes can obtained running function summarise_registration() registration_results object input. function summarise_registration() returns list containing three different objects: summary data frame containing summary registration results, registered_genes vector gene accessions IDs successfully registered, non_registered_genes vector non-registered gene accessions IDs. list gene accessions registered registered can viewed calling:","code":"# Get registration summary reg_summary <- summarise_registration(registration_results)  reg_summary$summary |>   knitr::kable() reg_summary$registered_genes #>  [1] \"BRAA02G018970.3C\" \"BRAA02G043220.3C\" \"BRAA03G023790.3C\" \"BRAA03G051930.3C\" #>  [5] \"BRAA04G005470.3C\" \"BRAA05G005370.3C\" \"BRAA06G025360.3C\" \"BRAA07G030470.3C\" #>  [9] \"BRAA07G034100.3C\" \"BRAA09G045310.3C\" reg_summary$non_registered_genes #> character(0)"},{"path":"https://ruthkr.github.io/greatR/articles/visualise-results.html","id":"plotting-registration-results","dir":"Articles","previous_headings":"","what":"Plotting registration results","title":"Visualising results","text":"function plot_registration_results() allows users plot registration results genes interest.  Notice plot includes label indicating particular genes registered registered, well registration parameters case registration successful. details function paramaters, go plot_registration_results().","code":"# Plot registration result plot_registration_results(   registration_results,   ncol = 2 )"},{"path":[]},{"path":"https://ruthkr.github.io/greatR/articles/visualise-results.html","id":"calculate-sample-distance","dir":"Articles","previous_headings":"Analysing similarity of expression profiles overtime before and after registering","what":"Calculate sample distance","title":"Visualising results","text":"registering data, users can compare overall similarity datasets registering using function calculate_distance(). function calculate_distance() returns list two data frames: registered distance scaled reference query expressions using registered time points. original distance scaled reference query expressions using original time points.","code":"sample_distance <- calculate_distance(registration_results)"},{"path":"https://ruthkr.github.io/greatR/articles/visualise-results.html","id":"plot-heatmap-of-sample-distances","dir":"Articles","previous_headings":"Analysing similarity of expression profiles overtime before and after registering","what":"Plot heatmap of sample distances","title":"Visualising results","text":"data frames can visualised using plot_heatmap() function, selecting either type = \"registered\" type = \"original\".   Notice use match_timepoints = TRUE match registered query time points reference time points.","code":"# Plot heatmap of mean expression profiles distance before registration process plot_heatmap(   sample_distance,   type = \"original\" ) # Plot heatmap of mean expression profiles distance after registration process plot_heatmap(   sample_distance,   type = \"registered\",   match_timepoints = TRUE )"},{"path":"https://ruthkr.github.io/greatR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ruth Kristianingsih. Author, maintainer. Alex Calderwood. Author.","code":""},{"path":"https://ruthkr.github.io/greatR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kristianingsih R, Calderwood (2023). greatR: Gene Registration Expression Time-Courses R. https://ruthkr.github.io/greatR/, https://github.com/ruthkr/greatR/.","code":"@Manual{,   title = {greatR: Gene Registration from Expression and Time-Courses in R},   author = {Ruth Kristianingsih and Alex Calderwood},   year = {2023},   note = {https://ruthkr.github.io/greatR/, https://github.com/ruthkr/greatR/}, }"},{"path":"https://ruthkr.github.io/greatR/index.html","id":"greatr-","dir":"","previous_headings":"","what":"Gene Registration from Expression and Time-Courses in R","title":"Gene Registration from Expression and Time-Courses in R","text":"greatR (Gene Registration Expression Time-courses R) tool register (align) two sets gene expression profiles users wish compare. gene profiles data referred query reference data. match ranges time profiles, timepoints query gene expression profiles transformed stretching shifting process. tool uses statistical model comparison based Bayesian approach evaluate optimality gene expression profiles alignment.","code":""},{"path":"https://ruthkr.github.io/greatR/index.html","id":"package-workflow","dir":"","previous_headings":"","what":"Package workflow","title":"Gene Registration from Expression and Time-Courses in R","text":"flowchart illustrates workflow package given input data:    details use package available function documentations following vignettes: Input data requirements Register data Visualise registration results","code":""},{"path":"https://ruthkr.github.io/greatR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Gene Registration from Expression and Time-Courses in R","text":"can install stable version greatR CRAN : development version greatR GitHub :","code":"install.packages(\"greatR\") # install.packages(\"devtools\") devtools::install_github(\"ruthkr/greatR\")"},{"path":"https://ruthkr.github.io/greatR/index.html","id":"usage---quick-start","dir":"","previous_headings":"","what":"Usage - quick start","title":"Gene Registration from Expression and Time-Courses in R","text":"basic example shows register (align) gene expression profiles time:","code":"# Load the package library(greatR) # Load a data frame from the sample data b_rapa_data <- system.file(\"extdata/brapa_arabidopsis_all_replicates.csv\", package = \"greatR\") |>   utils::read.csv()  # Running the registration registration_results <- register(   b_rapa_data,   reference = \"Ro18\",   query = \"Col0\" ) #> ── Validating input data ──────────────────────────────────────────────────────── #> ℹ Will process 10 genes. #>  #> ── Starting registration with optimisation ────────────────────────────────────── #> ℹ Using Nelder-Mead method. #> ℹ Using computed stretches and shifts search space limits. #> ✔ Optimising registration parameters for genes (10/10) [2.3s]"},{"path":"https://ruthkr.github.io/greatR/index.html","id":"reference","dir":"","previous_headings":"","what":"Reference","title":"Gene Registration from Expression and Time-Courses in R","text":"Calderwood, ., Hepworth, J., Woodhouse, … Morris, R. (2021). Comparative transcriptomics reveals desynchronisation gene expression floral transition Arabidopsis Brassica rapa cultivars. Quantitative Plant Biology, 2, E4. doi:10.1017/qpb.2021.6","code":""},{"path":"https://ruthkr.github.io/greatR/reference/calculate_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate distance between sample data before and after registration — calculate_distance","title":"Calculate distance between sample data before and after registration — calculate_distance","text":"Calculate distance sample data registration","code":""},{"path":"https://ruthkr.github.io/greatR/reference/calculate_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate distance between sample data before and after registration — calculate_distance","text":"","code":"calculate_distance(results)"},{"path":"https://ruthkr.github.io/greatR/reference/calculate_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate distance between sample data before and after registration — calculate_distance","text":"results Result registration process using register.","code":""},{"path":"https://ruthkr.github.io/greatR/reference/calculate_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate distance between sample data before and after registration — calculate_distance","text":"function returns list data frames includes: registered distance scaled reference query expressions using registered time points. original distance scaled reference query expressions using original time points.","code":""},{"path":"https://ruthkr.github.io/greatR/reference/get_approximate_stretch.html","id":null,"dir":"Reference","previous_headings":"","what":"Get approximate stretch factor — get_approximate_stretch","title":"Get approximate stretch factor — get_approximate_stretch","text":"get_approximate_stretch() function get stretch factor estimation given input data. function take time point ranges reference query data compare estimate stretch factor.","code":""},{"path":"https://ruthkr.github.io/greatR/reference/get_approximate_stretch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get approximate stretch factor — get_approximate_stretch","text":"","code":"get_approximate_stretch(data, reference = \"ref\", query = \"query\")"},{"path":"https://ruthkr.github.io/greatR/reference/get_approximate_stretch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get approximate stretch factor — get_approximate_stretch","text":"data Input data frame, either containing replicates gene expression . reference Accession name reference data. query Accession name query data.","code":""},{"path":"https://ruthkr.github.io/greatR/reference/get_approximate_stretch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get approximate stretch factor — get_approximate_stretch","text":"function returns estimation stretch factor registering data.","code":""},{"path":"https://ruthkr.github.io/greatR/reference/plot_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualise distances between samples from different time points — plot_heatmap","title":"Visualise distances between samples from different time points — plot_heatmap","text":"plot_heatmap() function allows users plot distances samples different time points investigate similarity progression gene expression states species registration.","code":""},{"path":"https://ruthkr.github.io/greatR/reference/plot_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualise distances between samples from different time points — plot_heatmap","text":"","code":"plot_heatmap(   results,   type = c(\"registered\", \"original\"),   match_timepoints = FALSE,   title = NULL,   axis_fontsize = NULL )"},{"path":"https://ruthkr.github.io/greatR/reference/plot_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualise distances between samples from different time points — plot_heatmap","text":"results Results containing distances two different reference query data, output calculate_distance. type Type plot, determines whether use \"registered\" \"original\" time points. default, \"registered\". match_timepoints TRUE, match query time points reference time points. title Optional plot title. axis_fontsize Font size X Y axes labels.","code":""},{"path":"https://ruthkr.github.io/greatR/reference/plot_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualise distances between samples from different time points — plot_heatmap","text":"Distance heatmap gene expression profiles time two different species.","code":""},{"path":"https://ruthkr.github.io/greatR/reference/plot_registration_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot gene of interest after registration — plot_registration_results","title":"Plot gene of interest after registration — plot_registration_results","text":"Plot gene interest registration","code":""},{"path":"https://ruthkr.github.io/greatR/reference/plot_registration_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot gene of interest after registration — plot_registration_results","text":"","code":"plot_registration_results(   results,   type = c(\"registered\", \"original\"),   genes_list = NULL,   title = NULL,   ncol = NULL )"},{"path":"https://ruthkr.github.io/greatR/reference/plot_registration_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot gene of interest after registration — plot_registration_results","text":"results Registration results, output register registration process. type Type plot, determines whether use \"registered\" \"original\" time points. default, \"registered\". genes_list Optional vector indicating gene_id values plotted. title Optional plot title. ncol Number columns plot grid. default calculated automatically.","code":""},{"path":"https://ruthkr.github.io/greatR/reference/plot_registration_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot gene of interest after registration — plot_registration_results","text":"Plot genes interest registration process (type = \"registered\") showing original time points (type = \"original\").","code":""},{"path":"https://ruthkr.github.io/greatR/reference/register.html","id":null,"dir":"Reference","previous_headings":"","what":"Register or synchronize different expression profiles — register","title":"Register or synchronize different expression profiles — register","text":"register() function register expression profiles user wishes compare.","code":""},{"path":"https://ruthkr.github.io/greatR/reference/register.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register or synchronize different expression profiles — register","text":"","code":"register(   input,   stretches = NA,   shifts = NA,   reference,   query,   scaling_method = c(\"none\", \"z-score\", \"min-max\"),   overlapping_percent = 0.5,   optimise_registration_parameters = TRUE,   optimisation_method = c(\"nm\", \"lbfgsb\", \"sa\"),   optimisation_config = NULL )"},{"path":"https://ruthkr.github.io/greatR/reference/register.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register or synchronize different expression profiles — register","text":"input Input data frame containing replicates gene expression genotype time point. stretches Candidate registration stretch factors apply query data, required optimise_registration_parameters = FALSE. shifts Candidate registration shift values apply query data, required optimise_registration_parameters = FALSE. reference Accession name reference data. query Accession name query data. scaling_method Scaling method applied data prior registration process. Either none (default), z-score, min-max. overlapping_percent Number minimum overlapping time points. Shifts considered leaves least many overlapping points applying registration function. optimise_registration_parameters Whether optimise registration parameters. default, TRUE. optimisation_method Optimisation method use. Either \"nm\" Nelder-Mead (default), \"lbfgsb\" L-BFGS-B, \"sa\" Simulated Annealing. optimisation_config Optional list arguments override default optimisation configuration.","code":""},{"path":"https://ruthkr.github.io/greatR/reference/register.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register or synchronize different expression profiles — register","text":"function returns list data frames, containing: data table containing scaled input data additional timepoint_reg column applying registration parameters query data. model_comparison table comparing optimal registration function gene (based all_shifts_df scores) model registration applied.","code":""},{"path":"https://ruthkr.github.io/greatR/reference/register.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register or synchronize different expression profiles — register","text":"","code":"if (FALSE) { # Load a data frame from the sample data data_path <- system.file(\"extdata/brapa_arabidopsis_all_replicates.csv\", package = \"greatR\") all_data <- utils::read.csv(data_path)  # Running the registration registration_results <- register(   input = all_data,   reference = \"Ro18\",   query = \"Col0\" ) }"},{"path":"https://ruthkr.github.io/greatR/reference/summarise_registration.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise registration results — summarise_registration","title":"Summarise registration results — summarise_registration","text":"Summarise registration results","code":""},{"path":"https://ruthkr.github.io/greatR/reference/summarise_registration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise registration results — summarise_registration","text":"","code":"summarise_registration(results)"},{"path":"https://ruthkr.github.io/greatR/reference/summarise_registration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise registration results — summarise_registration","text":"results Registration results, output register registration process.","code":""},{"path":"https://ruthkr.github.io/greatR/reference/summarise_registration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise registration results — summarise_registration","text":"function returns list containing: summary contains result summaries registration results. registered_genes vector gene accessions successfully registered. non_registered_genes vector non-registered gene accessions.","code":""},{"path":"https://ruthkr.github.io/greatR/news/index.html","id":"greatr-100","dir":"Changelog","previous_headings":"","what":"greatR 1.0.0","title":"greatR 1.0.0","text":"CRAN release: 2023-07-19 Rewrote registration pipeline scratch, deprecating unnecessary, redundant auxiliary functions. Added L-BFGS-B Nelder-Mead (now default) optimisation methods {greatR}. Switched manual calculation log likelihood via calc_loglik() instead stats::logLik(). Reduced computation time 1000 times, (x30 speed-package rewrite, x35 speed-switching default optimisation method). Removed {dplyr}, {magrittr}, {purrr}, {rlang}, {stringr} package dependencies. Added {neldermead} package depedency. register() summarise_registration() get_approximate_stretch() plot_registration_results() plot_heatmap() calculate_distance()","code":""},{"path":"https://ruthkr.github.io/greatR/news/index.html","id":"improvements-1-0-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"greatR 1.0.0","text":"Simplified parameters main register() function, added scaling_method. Simplified structure output object register(). Simplfied parameters summarise_registration(), plot_registration_results(), plot_heatmap(), calculate_distance() simply require results object register(), vastly simplifing usage. Improved messages, errors, progress indicators {cli}. Added correct pluralisation {cli} messages. Rewrote unit tests use {data.table} exclusively data manipulation. Added unit tests calc_loglik_H1(), calc_loglik_H2(), calc_overlapping_percent(), calculate_distance(), cross_join(), get_search_space_limits_from_params(), get_search_space_limits(), objective_fun(), optimise(), plot_heatmap(), plot_registration_results(), preprocess_data(), register_manually(), register(), summary_registration(), validate_params().","code":""},{"path":"https://ruthkr.github.io/greatR/news/index.html","id":"bug-fixes-1-0-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"greatR 1.0.0","text":"Fixed match_names() call validating accession names register() Fixed use deprecated aes_string() parsing timepoint_var using !!ggplot2::sym() call. Fixed preds left join plot_registration_results(). Fixed issue plot_registration_results() working genes unregistered type = \"registered\". Fixed calculation time_delta preprocess_data() ensure ’s grouped gene_id accession (just accession).","code":""},{"path":"https://ruthkr.github.io/greatR/news/index.html","id":"greatr-020","dir":"Changelog","previous_headings":"","what":"greatR 0.2.0","title":"greatR 0.2.0","text":"CRAN release: 2022-06-08 Added Alex Calderwood package co-author. Added vignette optimisation process. Refactored num_shifts shift_extreme parameters simplified shifts parameter.","code":""},{"path":"https://ruthkr.github.io/greatR/news/index.html","id":"improvements-0-2-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"greatR 0.2.0","text":"Improved default parameter values exported functions. Added {optimization}, {purrr} package dependencies. Removed {cowplot}, {ggpubr}, {ggrepel}, {Rtsne}, {viridis} package dependencies. Cleaned {cli} messages. Removed legacy AIC references, longer used. Updated calculate_between_sample_distance() use registration_results primary parameter instead mean_df, mean_df_sc, imputed_mean_df. Added warning comparable time points found using users’ pre-defined parameters. Refactored optimise_shift_extreme maintain_min_num_overlapping_points, properly defined corrected boundary box number overlapping points whether needed maintained .","code":""},{"path":"https://ruthkr.github.io/greatR/news/index.html","id":"bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"greatR 0.2.0","text":"Check input accessions exist input data get_approximate_stretch(). Manually create time point sorting levels x_sample y_sample columns according plot_heatmap(). Properly handle - character accession names plot_heatmap() time points parsed correctly.","code":""},{"path":"https://ruthkr.github.io/greatR/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"greatR 0.2.0","text":"Added optional parameter optimisation process using Simulated Annealing optimise_registration_params().","code":""},{"path":"https://ruthkr.github.io/greatR/news/index.html","id":"new-functions-0-2-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"greatR 0.2.0","text":"preprocess_data() simplify scale_and_register_data() code reuse logic elsewhere. get_best_stretch_and_shift_simplified(). get_BIC_from_registering_data(). get_boundary_box(). optimise_registration_params_single_gene(). optimise_registration_params() wrapper optimise_registration_params_single_gene() multiple genes. get_best_stretch_and_shift_after_optimisation().","code":""},{"path":"https://ruthkr.github.io/greatR/news/index.html","id":"greatr-010","dir":"Changelog","previous_headings":"","what":"greatR 0.1.0","title":"greatR 0.1.0","text":"CRAN release: 2022-01-12 Initial release. Added NEWS.md file track changes package.","code":""}]
